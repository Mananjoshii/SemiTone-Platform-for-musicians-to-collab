-- Create the 'users' table
CREATE TABLE users (
    id SERIAL PRIMARY KEY,                -- Unique user ID
    email VARCHAR(255) UNIQUE NOT NULL,  -- Email address
    password TEXT NOT NULL,               -- Hashed password
    name VARCHAR(255) NOT NULL,           -- Full name
    role VARCHAR(50) NOT NULL,            -- User role (e.g., musician, band_member, event_organizer)
    description TEXT,                     -- Additional description about the user
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- User creation timestamp
);

-- Create the 'bands' table (if not already existing)
CREATE TABLE bands (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,           -- Band name
    description TEXT                      -- Band description
);

-- Create the 'events' table (if not already existing)
CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,           -- Event name
    description TEXT,                     -- Event description
    date DATE                             -- Event date
);

-- Create a join table for users and bands (many-to-many)
CREATE TABLE user_bands (
    user_id INT REFERENCES users(id) ON DELETE CASCADE,
    band_id INT REFERENCES bands(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, band_id)
);


-- Artists Table
CREATE TABLE artists (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  genre VARCHAR(50),
  bio TEXT
);

-- Events Table
CREATE TABLE events (
  id SERIAL PRIMARY KEY,
  title VARCHAR(100) NOT NULL,
  date DATE NOT NULL,
  location VARCHAR(100),
  description TEXT
);

-- Bands Table
CREATE TABLE bands (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  genre VARCHAR(50),
  members INT
);


 obdknkztieqmttbk

 <%= artist.description || 'No description available.' %>

<p><strong>${review.user_name}</strong></p>
<p>${review.comment}</p>
          <small>${new Date(review.created_at).toLocaleString()}</small>